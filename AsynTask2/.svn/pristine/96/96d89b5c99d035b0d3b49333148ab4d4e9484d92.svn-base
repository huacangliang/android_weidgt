package com.jingzhong.asyntask2.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.security.MessageDigest;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.http.util.ByteArrayBuffer;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.graphics.Paint.FontMetrics;
import android.graphics.Rect;
import android.media.ThumbnailUtils;
import android.os.Environment;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.Toast;

import com.jingzhong.asyntask2.R;
import com.jingzhong.asyntask2.R.id;
import com.jingzhong.asyntask2.annotation.CreateView;

/**
 * 
 * @author dengzhijiang
 * 
 */
public class Utils {

	/**
	 * Hides the input method.
	 * 
	 * @param context
	 *            context
	 * @param view
	 *            The currently focused view
	 * @return success or not.
	 */
	public static boolean hideInputMethod(Context context, View view) {
		if (context == null || view == null) {
			return false;
		}

		InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
		if (imm != null) {
			return imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
		}

		return false;
	}

	/**
	 * Show the input method.
	 * 
	 * @param context
	 *            context
	 * @param view
	 *            The currently focused view, which would like to receive soft
	 *            keyboard input
	 * @return success or not.
	 */
	public static boolean showInputMethod(Context context, View view) {
		if (context == null || view == null) {
			return false;
		}

		InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
		if (imm != null) {
			return imm.showSoftInput(view, 0);
		}

		return false;
	}

	public static float pixelToDp(Context context, float val) {
		float density = context.getResources().getDisplayMetrics().density;
		return val * density;
	}

	public static String getHashedFileName(String url) {
		if (url == null || url.endsWith("/")) {
			return null;
		}

		String suffix = getSuffix(url);
		StringBuilder sb = null;

		try {
			MessageDigest digest = MessageDigest.getInstance("MD5");
			byte[] dstbytes = digest.digest(url.getBytes("UTF-8")); // GMaFroid
																	// uses
																	// UTF-16LE
			sb = new StringBuilder();
			for (int i = 0; i < dstbytes.length; i++) {
				sb.append(Integer.toHexString(dstbytes[i] & 0xff));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		if (null != sb && null != suffix) {
			return sb.toString() + "." + suffix;
		}

		return null;
	}

	private static String getSuffix(String fileName) {
		int dot_point = fileName.lastIndexOf(".");
		int sl_point = fileName.lastIndexOf("/");
		if (dot_point < sl_point) {
			return "";
		}

		if (dot_point != -1) {
			return fileName.substring(dot_point + 1);
		}

		return null;
	}

	/**
	 * Indicates whether the specified action can be used as an intent. This
	 * method queries the package manager for installed packages that can
	 * respond to an intent with the specified action. If no suitable package is
	 * found, this method returns false.
	 * 
	 * @param context
	 *            The application's environment.
	 * @param intent
	 *            The Intent action to check for availability.
	 * 
	 * @return True if an Intent with the specified action can be sent and
	 *         responded to, false otherwise.
	 */
	public static boolean isIntentAvailable(Context context, Intent intent) {
		final PackageManager packageManager = context.getPackageManager();

		List<ResolveInfo> list = packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);

		return list.size() > 0;
	}

	public static View creatViewById(View root, String idName) throws IllegalArgumentException, IllegalAccessException {
		Class<id> c = R.id.class;
		Field[] fields = c.getDeclaredFields();
		for (int i = 0; i < fields.length; i++) {
			Field field = fields[i];
			String name = field.getName();
			if (name.equalsIgnoreCase(idName)) {
				int id = field.getInt(name);
				return root.findViewById(id);
			}
		}

		return null;
	}

	public static void creatViewById(Activity root, View v, String idName)
			throws IllegalArgumentException, IllegalAccessException {
		Class<id> c = R.id.class;
		Field[] fields = c.getDeclaredFields();
		for (int i = 0; i < fields.length; i++) {
			Field field = fields[i];
			String name = field.getName();
			if (name.equalsIgnoreCase(idName)) {
				int id = field.getInt(name);
				v = root.findViewById(id);
			}
		}

		return;
	}

	public static View creatViewById(Activity root, String idName)
			throws IllegalArgumentException, IllegalAccessException {
		Class<id> c = R.id.class;
		Field[] fields = c.getDeclaredFields();
		for (int i = 0; i < fields.length; i++) {
			Field field = fields[i];
			String name = field.getName();
			if (name.equalsIgnoreCase(idName)) {
				int id = field.getInt(name);
				return root.findViewById(id);
			}
		}

		return null;
	}

	public static int findId(String idName, Class r)
			throws NoSuchFieldException, IllegalAccessException, IllegalArgumentException {

		return r.getDeclaredField(idName).getInt(null);
	}

	public static int findIdByIdName(String name, Class idClass)
			throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException {

		return findId(name, idClass);

	}

	public static void injectObject(Object obj, Activity activity, Class idClass) throws Exception {
		Class<?> classType = obj.getClass();
		Field[] fields = classType.getDeclaredFields();
		for (int i = 0; fields != null && i < fields.length; i++) {
			Field field = fields[i];
			if (field.isAnnotationPresent(CreateView.class)) {
				CreateView annotation = field.getAnnotation(CreateView.class);
				String name = annotation.value();
				if (TextUtils.isEmpty(name)) {
					continue;
				}
				int id = findId(name, idClass);
				if (id <= 0) {
					continue;
				}
				View v = activity.findViewById(id);
				if (v != null) {
					field.setAccessible(true);
					field.set(obj, v);
					field.setAccessible(false);
				}
			}
		}
	}

	public static void injectObject(Object obj, View v, Class idClass) throws Exception {
		Class<?> classType = obj.getClass();
		Field[] fields = classType.getDeclaredFields();
		for (int i = 0; fields != null && i < fields.length; i++) {
			Field field = fields[i];
			if (field.isAnnotationPresent(CreateView.class)) {
				CreateView annotation = field.getAnnotation(CreateView.class);
				String name = annotation.value();
				if (TextUtils.isEmpty(name)) {
					continue;
				}
				int id = findId(name, idClass);
				if (id <= 0) {
					continue;
				}
				View newV = v.findViewById(id);
				if (v != null) {
					field.setAccessible(true);
					field.set(obj, newV);
					field.setAccessible(false);
				}
			}
		}
	}

	/**
	 * 根据年月获取当前月份天数
	 * 
	 * @param time
	 * @return
	 */
	public static int getDaysByYearAndMonth(String time) {
		if (time.indexOf("-") > 0) {
			time = time.replace("-", "/");
		}

		Calendar rightNow = Calendar.getInstance();
		SimpleDateFormat simpleDate = new SimpleDateFormat("yyyy/MM"); // 如果写成年月日的形式的话，要写小d，如："yyyy/MM/dd"
		try {
			rightNow.setTime(simpleDate.parse(time)); // 要计算你想要的月份，改变这里即可
		} catch (ParseException e) {
			e.printStackTrace();
		}
		int days = rightNow.getActualMaximum(Calendar.DAY_OF_MONTH);
		return days;

	}

	/**
	 * 计算当前时间在此月的第几日
	 * 
	 * @param date
	 * @return
	 */
	public static int pexDayOfMonth(long date) {
		Date dt = new Date(date);
		;
		return dt.getDate();
	}

	public static String getMyUUID() {

		UUID uuid = UUID.randomUUID();

		String uniqueId = uuid.toString().replace("-", "");

		Log.d("debug", "----->UUID:" + uuid);

		return uniqueId;

	}

	/**
	 * 获取手机标示码
	 * 
	 * @param context
	 */
	public static String autoSetPhoneMoberId(Context context) {

		TelephonyManager telephonemanage = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);

		try {
			String identity = telephonemanage.getDeviceId();
			return identity;
		} catch (Exception e) {

			Log.d("error", e.getMessage());

		}
		return "";
	}

	public static void showLongToast(Context context, String msg) {
		if (context == null || msg == null)
			return;
		Toast.makeText(context, msg, Toast.LENGTH_LONG).show();
	}

	public static void showShortToast(Context context, String msg) {
		if (context == null || msg == null)
			return;
		Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();
	}

	public static void gotoActivity(Context c, Class<?> cs, Intent i) {
		if (i == null) {
			Intent intent = new Intent(c, cs);
			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			c.startActivity(intent);
		} else {
			i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			i.setClass(c, cs);
			c.startActivity(i);
		}

	}

	public interface CheckIsEmptySTR {
		boolean isE(String str);
	}

	public static boolean checkEmail(String str) {
		Pattern pattern = Pattern.compile(
				"^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");
		Matcher matcher = pattern.matcher(str);
		return matcher.matches();
	}

	/**
	 * 将对象转换成map
	 * 
	 * @param obj
	 * @return
	 */
	public static Map<String, Object> getValueMap(Object obj) {

		Map<String, Object> map = new HashMap<String, Object>();
		// System.out.println(obj.getClass());
		// 获取f对象对应类中的所有属性域
		Field[] fields = obj.getClass().getDeclaredFields();
		for (int i = 0, len = fields.length; i < len; i++) {
			String varName = fields[i].getName();
			try {
				// 获取原来的访问控制权限
				boolean accessFlag = fields[i].isAccessible();
				// 修改访问控制权限
				fields[i].setAccessible(true);
				// 获取在对象f中属性fields[i]对应的对象中的变量
				Object o = fields[i].get(obj);
				if (o != null)
					map.put(varName, o.toString());
				// System.out.println("传入的对象中包含一个如下的变量：" + varName + " = " + o);
				// 恢复访问控制权限
				fields[i].setAccessible(accessFlag);
			} catch (IllegalArgumentException ex) {
				ex.printStackTrace();
			} catch (IllegalAccessException ex) {
				ex.printStackTrace();
			}
		}
		return map;

	}

	public static String retain2(double f) {
		DecimalFormat df = new DecimalFormat("0.00");
		return df.format(f);
	}

	public static String retain1(double f) {
		DecimalFormat df = new DecimalFormat("0.0");
		return df.format(f);
	}

	public static void showProgress(ProgressDialog progressShow, String msg, View v) {
		if (progressShow == null) {
			return;
		}

		progressShow.setProgressStyle(ProgressDialog.STYLE_SPINNER);

		progressShow.setIndeterminate(false);
		progressShow.setCancelable(false);

		progressShow.setView(v);

		progressShow.setMessage(msg);

		progressShow.setCancelable(false);

		progressShow.show();
		Window win = progressShow.getWindow();
		win.setGravity(Gravity.CENTER);

	}

	public static void cancelProgress(ProgressDialog progressShow) {
		if (progressShow == null) {
			return;
		}
		if (progressShow.isShowing())
			progressShow.cancel();
	}

	public static String checkFilePath(String name, Context mContext, String FILECACHEPATH) {
		File f = null;
		if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())
				|| !Environment.isExternalStorageRemovable()) {
			f = mContext.getExternalCacheDir();
			if (f == null)
				f = mContext.getCacheDir();
		} else
			f = mContext.getCacheDir();

		String filePath = null;

		if (f != null && f.exists()) {
			f = new File(f.getAbsolutePath() + "/" + FILECACHEPATH);
			if (!f.isDirectory()) {
				f.mkdirs();
			}
			filePath = f.getAbsolutePath();
		}
		f = new File(filePath);
		if (!f.isDirectory()) {
			f.mkdirs();
		}
		if (!f.exists()) {
			Log.i("checkFilePath", "目录不存在");
			return null;
		}
		FileNameFilterUtils filte = new FileNameFilterUtils();
		filte.reg = "^" + name.substring(0, name.lastIndexOf(".")) + ".*";
		String[] list = f.list(filte);
		boolean isHas = false;
		String endStr = "";

		if (list != null && list.length > 0) {
			for (int i = 0; i < list.length; i++) {
				filePath += "/" + list[i];
				f = new File(filePath);
				if (f.exists()) {
					if (filePath.lastIndexOf("(") > -1 && filePath.lastIndexOf("") > -1) {
						String count = filePath.substring(filePath.lastIndexOf("(") + 1, filePath.lastIndexOf(")"));
						int countInt = Integer.valueOf(count);
						countInt++;
						String end = filePath.substring(filePath.lastIndexOf("."));
						filePath = filePath.substring(0, filePath.lastIndexOf("."));
						filePath = filePath.substring(0, filePath.lastIndexOf("("));
						endStr = "(" + countInt + ")" + end;
						filePath += endStr;
						endStr = filePath.substring(filePath.lastIndexOf("/"));
						isHas = true;
					}
					if (list.length == 1) {
						if (!isHas) {
							String end = filePath.substring(filePath.lastIndexOf("."));
							filePath = filePath.substring(0, filePath.lastIndexOf("."));
							filePath += "(0)" + end;
						}
					} else {
						if (i == 0) {
							filePath = filePath.replace("/" + list[0], "");
						} else {
							if (i < list.length - 1) {
								filePath = filePath.replace(endStr, "");
							}

						}

					}
				}
			}
		} else {
			filePath += "/" + name;
		}
		return filePath;
	}

	public static Bitmap createBitmapAsWingdow(Activity ac) {
		View v = ac.getWindow().getDecorView();
		v.setDrawingCacheEnabled(true);
		v.buildDrawingCache();
		Bitmap bitmap = v.getDrawingCache();

		// 获取状态栏高度
		Rect frame = new Rect();
		ac.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
		int statusBarHeight = frame.top;
		Log.i("TAG", "" + statusBarHeight);

		// 获取屏幕长和高
		int width = ac.getWindowManager().getDefaultDisplay().getWidth();
		int height = ac.getWindowManager().getDefaultDisplay().getHeight();
		// 去掉标题栏
		// Bitmap b = Bitmap.createBitmap(b1, 0, 25, 320, 455);
		int heightC = bitmap.getHeight() - statusBarHeight;

		if ((statusBarHeight + heightC) > bitmap.getHeight()) {
			statusBarHeight = (heightC + statusBarHeight) - bitmap.getHeight() - statusBarHeight;
		}

		Bitmap b = Bitmap.createBitmap(bitmap, 0, statusBarHeight, width, heightC);
		// Bitmap b=Bitmap.createScaledBitmap(bitmap, width, heightC, true);
		v.destroyDrawingCache();
		return b;
	}

	public static String cupView(Bitmap b, Context ac) {

		String path = "";
		InputStream is = Bitmap2IS(b);
		String name = Utils.getMyUUID() + ".png";
		try {
			path = save(is, ac, name);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return path;
	}

	/**
	 * 保存图片到缓存目录
	 * 
	 * @param InputStream
	 * @param context
	 * @param name
	 * @return
	 * @throws Exception
	 */
	public synchronized static String save(InputStream is, Context context, String name) throws Exception {
		File dataFile = null;
		if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
			dataFile = Environment.getExternalStorageDirectory().getAbsoluteFile();
		} else {
			dataFile = context.getExternalCacheDir();
		}

		String iamgePathT = dataFile.getAbsolutePath() + "/iamges/";
		File f = new File(iamgePathT);
		if (!f.exists()) {
			boolean ff = f.mkdirs();
			if (ff) {
				f = new File(iamgePathT, name);
				OutputStream os = new FileOutputStream(f);
				byte[] buffer = new byte[1024 * 4];
				int len = 0;
				while ((len = is.read(buffer)) != -1) {
					os.write(buffer, 0, len);
				}
				os.flush();
				os.close();
			}
			return f.getAbsolutePath();
		} else {
			f = new File(iamgePathT, name);
			OutputStream os = new FileOutputStream(f, false);
			byte[] buffer = new byte[1024 * 4];
			int len = 0;
			while ((len = is.read(buffer)) != -1) {
				os.write(buffer, 0, len);
			}
			is.close();
			os.flush();
			os.close();
			return f.getAbsolutePath();
		}
	}

	/**
	 * 保存图片到缓存目录
	 * 
	 * @param InputStream
	 * @param context
	 * @param name
	 * @return
	 * @throws Exception
	 */
	public synchronized static String save(InputStream is, String path, String name) {

		File f = new File(path);
		if (!f.isDirectory()) {
			boolean ff = f.mkdirs();
			if (ff) {
				f = new File(path, name);
				OutputStream os = null;
				try {
					os = new FileOutputStream(f);
					byte[] buffer = new byte[1024 * 4];
					int len = 0;
					while ((len = is.read(buffer)) != -1) {
						os.write(buffer, 0, len);
					}
					os.flush();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} finally {
					if (os != null)
						try {
							os.close();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
				}

			} else {
				return null;
			}
			return f.getAbsolutePath();
		} else {
			f = new File(path, name);
			OutputStream os = null;
			try {
				os = new FileOutputStream(f);
				byte[] buffer = new byte[1024 * 4];
				int len = 0;
				while ((len = is.read(buffer)) != -1) {
					os.write(buffer, 0, len);
				}
				os.flush();
				return f.getAbsolutePath();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} finally {
				if (os != null)
					try {
						os.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}

			return null;
		}
	}

	/**
	 * 将bitmap转换成inputstream
	 * 
	 * @param bm
	 * @return
	 */
	public static InputStream Bitmap2IS(Bitmap bm) {
		if (bm == null) {
			return null;
		}
		ByteArrayOutputStream baos = null;
		try {
			baos = new ByteArrayOutputStream();
			bm.compress(Bitmap.CompressFormat.PNG, 10, baos);
			InputStream sbs = new ByteArrayInputStream(baos.toByteArray());
			return sbs;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (baos != null) {
				try {
					baos.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (bm.isRecycled()) {
				bm.recycle();
			}

		}

		return null;
	}

	/**
	 * 设置全屏沉浸式 </br>
	 * 暂时有bug，不能使用
	 * 
	 * @param ac
	 * @param color
	 */
	public static void setFullScreeColor(Activity ac, int color) {
		return;
		// int status = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
		// | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
		//
		// if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
		// // // 透明状态栏
		// ac.getWindow().addFlags(
		// WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		// // // // 透明导航栏
		// // ac.getWindow().addFlags(
		// // WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
		// ac.getWindow().getDecorView().setSystemUiVisibility(status);
		// SystemBarTintManager tintManager = new SystemBarTintManager(ac);
		// tintManager.setStatusBarTintEnabled(true);
		// tintManager.setStatusBarTintColor(color);
		// }
	}

	private static SimpleDateFormat dataFormat;

	public static SimpleDateFormat getYYYY_MM_DD_HH_MM_SS_Formate() {
		if (dataFormat == null) {
			dataFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		}
		return dataFormat;

	}

	public static Bitmap createSimpleThums_200px(Bitmap bitmap) {

		return ThumbnailUtils.extractThumbnail(bitmap, 200, 200, ThumbnailUtils.OPTIONS_RECYCLE_INPUT);

	}

	public static boolean isNumeric(String str) {

		try {
			Integer.parseInt(str);
			return true;
		} catch (Exception e) {
			// TODO: handle exception
		}

		Pattern pattern = Pattern.compile("-?[0-9]+.?[0-9]+");
		Matcher isNum = pattern.matcher(str.trim());
		if (!isNum.matches()) {
			return false;
		}
		return true;
	}

	public static boolean startPing(String ip) {
		Log.e("Ping", "startPing...");
		boolean success = false;
		Process p = null;

		try {
			p = Runtime.getRuntime().exec("ping -c 1 -i 0.2 -W 1 " + ip);
			int status = p.waitFor();
			if (status == 0) {
				success = true;
			} else {
				success = false;
			}
		} catch (IOException e) {
			success = false;
		} catch (InterruptedException e) {
			success = false;
		} finally {
			p.destroy();
		}

		return success;
	}

	public static String readXMLToString_Config(Context context, String name) {

		try {
			InputStream is = context.getResources().getAssets().open(name);
			byte[] buffer = new byte[1024];
			ByteArrayBuffer bab = new ByteArrayBuffer(1024);

			while (is.read(buffer) != -1) {
				bab.append(buffer, 0, buffer.length);
			}
			is.close();

			String res = new String(bab.toByteArray());
			buffer = Base64.decode(res.getBytes(), Base64.DEFAULT);
			res = new String(buffer);

			return res;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	public static String converoDate(int date) {
		if (date < 0) {
			date = 0;
		}
		String time = date >= 10 ? date + "" : "0" + date;
		return time;

	}

	/**
	 * 获取手机标示码
	 * 
	 * @param context
	 */
	public static String getPhoneMoberId(Context context) {

		TelephonyManager telephonemanage = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);

		try {
			String identity = telephonemanage.getDeviceId();
			return identity;
		} catch (Exception e) {

			Log.d("error", e.getMessage());

		}
		return null;
	}

	/**
	 * sqllite到Java字段的类型映射
	 */
	public static final Map<String, String> SQLMAPJAVAFIELD = new HashMap<String, String>();

	static {
		SQLMAPJAVAFIELD.put("String", "text");
		SQLMAPJAVAFIELD.put("char", "varchar");
		SQLMAPJAVAFIELD.put("int", "Integer");
		SQLMAPJAVAFIELD.put("double", "decimal(10,2)");
		SQLMAPJAVAFIELD.put("null", "NULL");
		SQLMAPJAVAFIELD.put("float", "decimal(10,2)");
		SQLMAPJAVAFIELD.put("Long", "Long");
	}

	/**
	 * 将对象的属性封装在map，object为属性类型
	 * 
	 * @param cls
	 * @return
	 */
	public static Map<String, Object> objectFieldToList(Class<?> cls) {
		Field[] fields = cls.getDeclaredFields();
		Map<String, Object> fieldList = new HashMap<String, Object>();
		for (int i = 0; i < fields.length; i++) {
			String name = fields[i].getName();
			Object type = fields[i].getType();
			fieldList.put(name, type);
		}
		return fieldList;

	}

	/**
	 * 将map集合赋值给对象
	 * 
	 * @param obj
	 * @param source
	 */
	public static void setValue(Object obj, Map<String, Object> source) {

		TreeSet<String> tableKey = new TreeSet<String>(source.keySet());
		Iterator<String> it = tableKey.iterator();

		while (it.hasNext()) {
			String key = it.next();
			try {
				Field field = obj.getClass().getDeclaredField(key);
				field.setAccessible(true);
				Object o = source.get(key);
				if (o == null)
					continue;
				if (field.getType() == String.class) {
					String no = (String) o;
					field.set(obj, no);
				} else if (field.getType() == Integer.class || field.getType() == int.class) {
					Integer no = Integer.parseInt(o.toString());
					field.set(obj, no);
				} else

				if (field.getType() == Double.class || field.getType() == double.class) {
					Double no = Double.parseDouble(o.toString());
					field.set(obj, no);
				} else

				if (field.getType() == Long.class || field.getType() == long.class) {
					Long no = Long.parseLong(o.toString());
					field.set(obj, no);
				} else

				if (field.getType() == Byte.class || field.getType() == byte.class) {
					Byte no = Byte.parseByte(o.toString());
					field.set(obj, no);
				} else

				if (field.getType() == Short.class || field.getType() == short.class) {
					Short no = Short.parseShort(o.toString());
					field.set(obj, no);
				} else

				if (field.getType() == Date.class) {
					Date no = (Date) o;
					field.set(obj, no);
				} else

				if (field.getType() == Float.class || field.getType() == float.class) {
					Float no = Float.parseFloat(o.toString());
					field.set(obj, no);
				} else if (field.getType() == Character.class || field.getType() == char.class) {
					char c = (Character) o;
					field.set(obj, c);
				}

				field.setAccessible(false);
			} catch (NoSuchFieldException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				continue;
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				continue;
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				continue;
			}
		}

	}

	public static Double getMaxValue(List<Double> list) {
		double max = 0;
		for (int i = 0; i < list.size(); i++) {
			double t = list.get(i);
			max = Math.max(max, t);
		}
		return max;
	}

	/**
	 * 将时间戳转为代表"距现在多久之前"的字符串
	 * 
	 * @param timeStr
	 *            时间戳
	 * @return
	 */
	public static String getStandardDate(long timeStr) {

		StringBuffer sb = new StringBuffer();

		long time = System.currentTimeMillis() - timeStr;
		long mill = (long) Math.ceil(time / 1000);// 秒前

		long minute = (long) Math.ceil(time / 60 / 1000.0f);// 分钟前

		long hour = (long) Math.ceil(time / 60 / 60 / 1000.0f);// 小时

		long day = (long) Math.ceil(time / 24 / 60 / 60 / 1000.0f);// 天前

		if (day - 1 > 0) {
			sb.append(day + "天");
		} else if (hour - 1 > 0) {
			if (hour >= 24) {
				sb.append("1天");
			} else {
				sb.append(hour + "小时");
			}
		} else if (minute - 1 > 0) {
			if (minute == 60) {
				sb.append("1小时");
			} else {
				sb.append(minute + "分钟");
			}
		} else if (mill - 1 > 0) {
			if (mill == 60) {
				sb.append("1分钟");
			} else {
				sb.append(mill + "秒");
			}
		} else {
			sb.append("刚刚");
		}
		if (!sb.toString().equals("刚刚")) {
			sb.append("前");
		}
		return sb.toString();
	}

	/**
	 * 计算卡路里 返回值：卡路里.
	 * 
	 * @param speed
	 *            速度,单位 米/秒
	 * @param seconds
	 *            运动时间,单位 秒
	 * @param weight
	 *            体重 单位 千克
	 */
	public static int calculateCalories(double speed, int seconds, int weight) {
		// System.out.println(">>>[卡路里]speed="+speed+", seconds="+seconds+",
		// weight="+weight);
		// 卡路里
		double calory = 0;
		// 卡路里系数
		double modulus = 0;
		// 速度 单位 km/hr
		double s = speed * 3600.0 / 1000;// speed * 1000 / 3600.0;
		if (s <= 9.654)
			return (int) (s * (seconds / 3600.0) * weight * 1.099);
		else if (s > 19.308)
			modulus = 0.13;
		else if (s > 17.699)
			modulus = 0.113;
		else if (s > 16.09)
			modulus = 0.1;
		else if (s > 14.481)
			modulus = 0.094;
		else if (s > 12.872)
			modulus = 0.089;
		else if (s > 11.263)
			modulus = 0.085;
		else if (s > 9.654)
			modulus = 0.079;

		calory = getCalory(seconds / 60.0, weight, modulus);
		return (int) calory;
	}

	/**
	 * 计算卡路里值
	 * 
	 * @param minute
	 * @param weight
	 * @param modulus
	 * @return
	 */
	private static double getCalory(double minute, int weight, double modulus) {
		return minute * weight / 0.453 * modulus;
	}

	public static SimpleDateFormat dateFormart = new SimpleDateFormat("yyyy-MM-dd");

	/**
	 * 获取字体高度
	 * 
	 * @param fontSize
	 * @return
	 */
	public static float getFontHeight(float fontSize) {
		Paint paint = new Paint();
		paint.setTextSize(fontSize);
		FontMetrics fm = paint.getFontMetrics();
		return (float) Math.ceil(fm.descent - fm.ascent);
	}

}
